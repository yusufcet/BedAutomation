@model IEnumerable<BedAutomation.Models.Reservation>

@{
    ViewData["Title"] = "Reservations Calendar";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <h4 class="mb-0"><i class="bi bi-calendar-event me-2 text-primary"></i>Reservations Calendar</h4>
                        <p class="text-muted mb-0">Interactive calendar view of all reservations</p>
                    </div>
                    <div class="d-flex gap-2">
                        <a asp-action="Create" class="btn btn-primary btn-sm">
                            <i class="bi bi-plus-circle me-1"></i>New Reservation
                        </a>
                    </div>
                </div>
                <div class="card-body p-0">
                    <!-- Calendar Legend -->
                    <div class="p-3 border-bottom bg-light">
                        <div class="d-flex flex-wrap gap-3">
                            <small class="text-muted fw-bold">Status Legend:</small>
                            <div class="d-flex align-items-center">
                                <div class="legend-color bg-success me-2"></div>
                                <small>Active</small>
                            </div>
                            <div class="d-flex align-items-center">
                                <div class="legend-color bg-primary me-2"></div>
                                <small>Reserved</small>
                            </div>
                            <div class="d-flex align-items-center">
                                <div class="legend-color bg-secondary me-2"></div>
                                <small>Completed</small>
                            </div>
                            <div class="d-flex align-items-center">
                                <div class="legend-color bg-danger me-2"></div>
                                <small>Cancelled</small>
                            </div>
                        </div>
                    </div>

                    <!-- Calendar Container -->
                    <div class="p-3">
                        <!-- Calendar Header -->
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div class="d-flex align-items-center">
                                <button class="btn btn-outline-primary btn-sm me-2" id="prevMonth">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                                <h4 class="mb-0 me-2" id="currentMonth">December 2024</h4>
                                <button class="btn btn-outline-primary btn-sm" id="nextMonth">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </div>
                            <button class="btn btn-primary btn-sm" id="todayButton">
                                <i class="bi bi-calendar-day me-1"></i>Today
                            </button>
                        </div>

                        <!-- Custom Calendar -->
                        <div id="customCalendar">
                            <div class="calendar-grid">
                                <!-- Calendar will be generated here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Stats -->
    <div class="row">
        <div class="col-md-3 mb-3">
            <div class="card bg-primary text-white">
                <div class="card-body text-center">
                    <i class="bi bi-calendar-check fs-1 mb-2"></i>
                    <h4 class="mb-0">@Model.Count(r => r.Status == "Active")</h4>
                    <small>Active Reservations</small>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <i class="bi bi-calendar-plus fs-1 mb-2"></i>
                    <h4 class="mb-0">@Model.Count(r => r.Status == "Reserved")</h4>
                    <small>Reserved</small>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card bg-warning text-white">
                <div class="card-body text-center">
                    <i class="bi bi-exclamation-triangle fs-1 mb-2"></i>
                    <h4 class="mb-0">@Model.Count(r => r.Priority == "Emergency")</h4>
                    <small>Emergency Cases</small>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <i class="bi bi-calendar-day fs-1 mb-2"></i>
                    <h4 class="mb-0">@Model.Count(r => r.CheckInDate.Date == DateTime.UtcNow.Date)</h4>
                    <small>Today's Check-ins</small>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Event Details Modal -->
<div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventModalLabel">
                    <i class="bi bi-calendar-event me-2"></i>Reservation Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label text-muted">Patient</label>
                            <div class="fw-bold" id="modalPatient"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted">Room & Bed</label>
                            <div class="fw-bold" id="modalRoomBed"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted">Doctor</label>
                            <div class="fw-bold" id="modalDoctor"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label text-muted">Status</label>
                            <div id="modalStatus"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted">Priority</label>
                            <div id="modalPriority"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted">Admission Type</label>
                            <div class="fw-bold" id="modalAdmissionType"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <a href="#" class="btn btn-primary" id="viewDetailsBtn">
                    <i class="bi bi-eye me-1"></i>View Full Details
                </a>
                <a href="#" class="btn btn-outline-primary" id="editReservationBtn">
                    <i class="bi bi-pencil me-1"></i>Edit
                </a>
            </div>
        </div>
    </div>
</div>

<style>
    .legend-color {
        width: 12px;
        height: 12px;
        border-radius: 2px;
    }
    
    /* Custom Calendar Styles */
    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 1px;
        background-color: #dee2e6;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .calendar-day-header {
        background-color: var(--bs-primary);
        color: white;
        padding: 15px 8px;
        text-align: center;
        font-weight: 600;
        font-size: 0.9rem;
    }
    
    .calendar-day {
        background-color: white;
        min-height: 120px;
        padding: 8px;
        position: relative;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .calendar-day:hover {
        background-color: #f8f9fa;
    }
    
    .calendar-day.other-month {
        background-color: #f8f9fa;
        color: #6c757d;
    }
    
    .calendar-day.today {
        background-color: rgba(99, 102, 241, 0.1);
        border: 2px solid var(--bs-primary);
    }
    
    .calendar-day-number {
        font-weight: 600;
        margin-bottom: 5px;
        font-size: 0.9rem;
    }
    
    .calendar-event {
        background-color: var(--bs-primary);
        color: white;
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 0.75rem;
        margin-bottom: 2px;
        cursor: pointer;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        transition: all 0.2s ease;
    }
    
    .calendar-event:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .calendar-event.status-active {
        background-color: #28a745;
    }
    
    .calendar-event.status-reserved {
        background-color: #007bff;
    }
    
    .calendar-event.status-completed {
        background-color: #6c757d;
    }
    
    .calendar-event.status-cancelled {
        background-color: #dc3545;
    }
    
    .calendar-event.priority-emergency {
        border-left: 4px solid #ffc107;
        font-weight: bold;
    }
    
    .event-count {
        font-size: 0.7rem;
        color: #6c757d;
        margin-top: 2px;
    }
</style>

<script>
// Custom Calendar Implementation - No external dependencies
class SimpleCalendar {
    constructor() {
        this.currentDate = new Date();
        this.events = [];
        this.monthNames = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ];
        this.dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        this.init();
    }

    async init() {
        console.log('Starting calendar initialization...');
        await this.loadEvents();
        this.render();
        this.bindEvents();
        console.log('Calendar initialized successfully');
    }

    async loadEvents() {
        try {
            console.log('Loading events from server...');
            const response = await fetch('@Url.Action("GetCalendarEvents")');
            if (!response.ok) {
                throw new Error('Failed to fetch events');
            }
            
            const data = await response.json();
            this.events = data.map(event => ({
                id: event.id,
                title: event.title,
                start: new Date(event.start),
                end: event.end ? new Date(event.end) : null,
                status: event.extendedProps.status,
                priority: event.extendedProps.priority,
                patient: event.extendedProps.patient,
                room: event.extendedProps.room,
                bed: event.extendedProps.bed,
                doctor: event.extendedProps.doctor,
                admissionType: event.extendedProps.admissionType
            }));
            console.log('Loaded', this.events.length, 'events');
        } catch (error) {
            console.error('Error loading events:', error);
            this.events = [];
            // Show error message to user
            document.querySelector('#customCalendar').innerHTML = 
                '<div class="alert alert-warning">Unable to load calendar events. Please refresh the page.</div>';
        }
    }

    render() {
        this.updateHeader();
        this.renderCalendar();
    }

    updateHeader() {
        const monthYear = `${this.monthNames[this.currentDate.getMonth()]} ${this.currentDate.getFullYear()}`;
        document.getElementById('currentMonth').textContent = monthYear;
    }

    renderCalendar() {
        const calendarGrid = document.querySelector('.calendar-grid');
        if (!calendarGrid) return;
        
        calendarGrid.innerHTML = '';

        // Add day headers
        this.dayNames.forEach(day => {
            const header = document.createElement('div');
            header.className = 'calendar-day-header';
            header.textContent = day;
            calendarGrid.appendChild(header);
        });

        // Get first day of month and calculate start date
        const firstDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay());

        // Render 6 weeks (42 days)
        for (let i = 0; i < 42; i++) {
            const currentDate = new Date(startDate);
            currentDate.setDate(startDate.getDate() + i);
            
            const dayElement = this.createDayElement(currentDate);
            calendarGrid.appendChild(dayElement);
        }
    }

    createDayElement(date) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        
        const isCurrentMonth = date.getMonth() === this.currentDate.getMonth();
        const isToday = this.isToday(date);
        
        if (!isCurrentMonth) {
            dayElement.classList.add('other-month');
        }
        
        if (isToday) {
            dayElement.classList.add('today');
        }

        // Day number
        const dayNumber = document.createElement('div');
        dayNumber.className = 'calendar-day-number';
        dayNumber.textContent = date.getDate();
        dayElement.appendChild(dayNumber);

        // Events for this day
        const dayEvents = this.getEventsForDate(date);
        const maxVisible = 3;
        
        dayEvents.slice(0, maxVisible).forEach(event => {
            const eventElement = this.createEventElement(event);
            dayElement.appendChild(eventElement);
        });

        // Show count if more events
        if (dayEvents.length > maxVisible) {
            const moreElement = document.createElement('div');
            moreElement.className = 'event-count';
            moreElement.textContent = `+${dayEvents.length - maxVisible} more`;
            dayElement.appendChild(moreElement);
        }

        return dayElement;
    }

    createEventElement(event) {
        const eventElement = document.createElement('div');
        eventElement.className = `calendar-event status-${event.status.toLowerCase()}`;
        
        if (event.priority === 'Emergency') {
            eventElement.classList.add('priority-emergency');
        }
        
        eventElement.textContent = event.title;
        eventElement.addEventListener('click', (e) => {
            e.stopPropagation();
            this.showEventModal(event);
        });
        
        return eventElement;
    }

    getEventsForDate(date) {
        return this.events.filter(event => {
            const eventDate = new Date(event.start);
            return eventDate.toDateString() === date.toDateString();
        });
    }

    isToday(date) {
        const today = new Date();
        return date.toDateString() === today.toDateString();
    }

    showEventModal(event) {
        document.getElementById('modalPatient').textContent = event.patient || 'N/A';
        document.getElementById('modalRoomBed').textContent = (event.room || 'N/A') + ' - ' + (event.bed || 'N/A');
        document.getElementById('modalDoctor').textContent = event.doctor || 'N/A';
        document.getElementById('modalAdmissionType').textContent = event.admissionType || 'N/A';
        
        // Status badge
        document.getElementById('modalStatus').innerHTML = this.getStatusBadge(event.status);
        
        // Priority badge
        document.getElementById('modalPriority').innerHTML = this.getPriorityBadge(event.priority);
        
        // Set action buttons
        document.getElementById('viewDetailsBtn').href = '@Url.Action("Details", "Reservation")/' + event.id;
        document.getElementById('editReservationBtn').href = '@Url.Action("Edit", "Reservation")/' + event.id;
        
        // Show modal using Bootstrap's JavaScript API
        const modal = new bootstrap.Modal(document.getElementById('eventModal'));
        modal.show();
    }

    getStatusBadge(status) {
        const badges = {
            'Active': '<span class="badge bg-success">Active</span>',
            'Reserved': '<span class="badge bg-primary">Reserved</span>',
            'Completed': '<span class="badge bg-secondary">Completed</span>',
            'Cancelled': '<span class="badge bg-danger">Cancelled</span>'
        };
        return badges[status] || `<span class="badge bg-light text-dark">${status}</span>`;
    }

    getPriorityBadge(priority) {
        const badges = {
            'Emergency': '<span class="badge bg-danger">Emergency</span>',
            'High': '<span class="badge bg-warning">High</span>',
            'Normal': '<span class="badge bg-info">Normal</span>',
            'Low': '<span class="badge bg-secondary">Low</span>'
        };
        return badges[priority] || `<span class="badge bg-light text-dark">${priority}</span>`;
    }

    bindEvents() {
        const prevBtn = document.getElementById('prevMonth');
        const nextBtn = document.getElementById('nextMonth');
        const todayBtn = document.getElementById('todayButton');
        
        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                this.currentDate.setMonth(this.currentDate.getMonth() - 1);
                this.render();
            });
        }

        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                this.currentDate.setMonth(this.currentDate.getMonth() + 1);
                this.render();
            });
        }

        if (todayBtn) {
            todayBtn.addEventListener('click', () => {
                this.currentDate = new Date();
                this.render();
            });
        }
    }
}

// Initialize calendar when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing calendar...');
    window.calendar = new SimpleCalendar();
});
</script> 